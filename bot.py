# 1. –ù–∞ –∫–æ–º–∞–Ω–¥—É /start, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –±–æ—Ç—É, –æ—Ç–≤–µ—Ç–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.
# 2. –ù–∞ –∫–æ–º–∞–Ω–¥—É /sendcat - –æ—Ç–ø—Ä–∞–≤–∏–º üò∫
# 3. –ù–∞ –∫–æ–º–∞–Ω–¥—É /senddog - –æ—Ç–ø—Ä–∞–≤–∏–º üê∂
import os
import logging
import aiogram
import dotenv
dotenv.load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = aiogram.Bot(token=BOT_TOKEN)
dp = aiogram.Dispatcher(bot=bot)


@dp.message_handler(commands='start')
async def start(message: aiogram.types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!')


@dp.message_handler(commands='send')
async def send_cat(message: aiogram.types.Message):

    ANIMAL_EMOJIS = {
        "cat": "üò∫",
        "dog": "üê∂",
        "zebra": "ü¶ì",
        "dragon": "üê≤"
    }
    animal = message.get_args()
    if animal in ANIMAL_EMOJIS:
        await message.answer(ANIMAL_EMOJIS[animal])
    else:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞!\n–î–æ—Å—Ç—É–ø–Ω—ã:\n" + '\n'.join(ANIMAL_EMOJIS.keys()))


async def send_dog(message: aiogram.types.Message):
    await message.answer('üê∂')

dp.register_message_handler(send_dog, commands='senddog')


@dp.message_handler(commands='help')
async def help(message: aiogram.types.Message):
    await message.answer('/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n'
                         '/help - –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n'
                         '/send [–∂–∏–≤–æ—Ç–Ω–æ–µ] - –ø—Ä–∏—Å–ª–∞—Ç—å —ç–º–æ–¥–∑–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ')


@dp.message_handler(commands="dice")
async def cmd_dice(message: aiogram.types.Message):
    sent_dice = await message.answer_dice(emoji="üèÄ")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±–∏–ª {sent_dice.dice.value} –æ—á–∫–æ–≤.")


@dp.message_handler()
async def echo(message: aiogram.types.Message):
    if message.text:
        await message.answer(message.text)
    else:
        await message.answer(message.caption)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    aiogram.executor.start_polling(dispatcher=dp)
